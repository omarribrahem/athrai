// =================================================================
//   functions/askAI.js
//   ŸÖŸÜÿµÿ© ÿ£ÿ´ÿ± ÿßŸÑÿ™ÿπŸÑŸäŸÖŸäÿ© - Free Tier Models
//   
//   ÿßŸÑŸÖŸàÿØŸäŸÑÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ© (ŸÉŸÑŸáÿß ŸÖÿ¨ÿßŸÜŸäÿ©):
//   - gemini-1.5-flash (ÿßŸÑŸÜÿµ) - 15 requests/minute
//   - text-embedding-004 (Embeddings) - 1500 requests/day
//   
//   ‚úÖ Semantic Caching
//   ‚úÖ Supabase Integration
//   ‚úÖ ÿ™ŸàŸÅŸäÿ± 70-80% ŸÖŸÜ API calls
// =================================================================

import { createClient } from '@supabase/supabase-js';

/**
 * ÿ•ŸÜÿ¥ÿßÿ° embedding ŸÖŸÜ ÿßŸÑŸÜÿµ
 * Model: text-embedding-004 (Free tier)
 */
async function createEmbedding(text, apiKey) {
  const model = 'text-embedding-004';
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:embedContent?key=${apiKey}`;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        content: {
          parts: [{ text: text }]
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Embedding API error (${response.status}): ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.embedding || !result.embedding.values) {
      throw new Error('Invalid embedding response format');
    }
    
    return result.embedding.values;
  } catch (error) {
    console.error('‚ùå createEmbedding error:', error.message);
    throw error;
  }
}

/**
 * ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿ≥ÿ§ÿßŸÑ ŸÖÿ¥ÿßÿ®Ÿá ŸÅŸä Cache
 */
async function findSimilarQuestion(supabase, questionEmbedding, threshold = 0.85) {
  try {
    const { data, error } = await supabase.rpc('match_questions', {
      query_embedding: questionEmbedding,
      match_threshold: threshold,
      match_count: 1
    });

    if (error) {
      console.error('‚ùå Similarity search error:', error);
      return null;
    }

    if (data && data.length > 0) {
      const match = data[0];
      const similarityPercent = (match.similarity * 100).toFixed(1);
      
      console.log(`‚úÖ CACHE HIT! Similarity: ${similarityPercent}%`);
      
      await supabase
        .from('ai_responses_cache')
        .update({ 
          hit_count: match.hit_count + 1,
          last_accessed: new Date().toISOString()
        })
        .eq('id', match.id);

      return {
        answer: match.response_text,
        similarity: match.similarity,
        originalQuestion: match.question_text,
        hitCount: match.hit_count + 1
      };
    }

    console.log('‚ùå CACHE MISS');
    return null;
  } catch (err) {
    console.error('‚ùå findSimilarQuestion exception:', err.message);
    return null;
  }
}

/**
 * ÿ≠ŸÅÿ∏ ÿßŸÑÿ≥ÿ§ÿßŸÑ ŸàÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©
 */
async function cacheResponse(supabase, questionText, questionEmbedding, responseText, contextHash) {
  try {
    const { error } = await supabase
      .from('ai_responses_cache')
      .insert({
        question_text: questionText,
        question_embedding: questionEmbedding,
        response_text: responseText,
        lecture_context_hash: contextHash,
        hit_count: 1,
        created_at: new Date().toISOString(),
        last_accessed: new Date().toISOString()
      });

    if (error) {
      console.error('‚ùå Cache save error:', error.message);
    } else {
      console.log('üíæ Response cached');
    }
  } catch (err) {
    console.error('‚ùå cacheResponse exception:', err.message);
  }
}

/**
 * ÿßÿ≥ÿ™ÿØÿπÿßÿ° Google Gemini
 * Model: gemini-1.5-flash (Free tier: 15 RPM)
 */
async function queryGoogleAI(systemInstruction, contents, apiKey) {
  const model = 'gemini-1.5-flash';
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;

  const requestBody = {
    systemInstruction: {
      parts: [{ text: systemInstruction }]
    },
    contents: contents,
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 512,
    }
  };

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorBody = await response.text();
      console.error("‚ùå Gemini API Error:", errorBody);
      throw new Error(`Gemini API error (${response.status})`);
    }

    const result = await response.json();

    if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
      return result.candidates[0].content.parts[0].text;
    }

    return "ÿπŸÅŸàÿßŸãÿå ŸÑŸÖ ÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿ•Ÿäÿ¨ÿßÿØ ÿ•ÿ¨ÿßÿ®ÿ© ŸÖŸÜÿßÿ≥ÿ®ÿ©. ŸáŸÑ ŸäŸÖŸÉŸÜŸÉ ÿ•ÿπÿßÿØÿ© ÿµŸäÿßÿ∫ÿ© ÿ≥ÿ§ÿßŸÑŸÉÿü";
  } catch (error) {
    console.error("‚ùå queryGoogleAI error:", error.message);
    throw error;
  }
}

/**
 * ÿßŸÑÿØÿßŸÑÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
 */
export async function onRequest(context) {
  const startTime = Date.now();
  
  try {
    const { env, request } = context;
    
    const GOOGLE_API_KEY = env.GOOGLE_API_KEY;
    const SUPABASE_URL = env.SUPABASE_URL;
    const SUPABASE_ANON_KEY = env.SUPABASE_ANON_KEY;

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Method
    if (request.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method Not Allowed' }), { 
        status: 405,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Google API Key
    if (!GOOGLE_API_KEY) {
      console.error('‚ùå GOOGLE_API_KEY missing');
      return new Response(JSON.stringify({ error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿÆÿßÿØŸÖ.' }), {
        status: 500, 
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    const { conversationHistory, context: lectureContext } = await request.json();

    if (!conversationHistory || !Array.isArray(conversationHistory)) {
      return new Response(JSON.stringify({ error: 'ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©.' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿ¢ÿÆÿ± ÿ≥ÿ§ÿßŸÑ
    const lastUserMessage = conversationHistory
      .slice()
      .reverse()
      .find(msg => msg.role === 'user');

    if (!lastUserMessage) {
      return new Response(JSON.stringify({ error: 'ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ≥ÿ§ÿßŸÑ.' }), {
        status: 400, 
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const userQuestion = lastUserMessage.content;
    console.log(`\nüì© "${userQuestion.substring(0, 70)}..."`);

    // === ŸÖÿ≠ÿßŸàŸÑÿ© Cache ===
    let cachedResult = null;

    if (SUPABASE_URL && SUPABASE_ANON_KEY) {
      try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        console.log('üîç Creating embedding...');
        const questionEmbedding = await createEmbedding(userQuestion, GOOGLE_API_KEY);
        
        console.log('üîé Searching cache...');
        cachedResult = await findSimilarQuestion(supabase, questionEmbedding, 0.85);

        if (cachedResult) {
          const responseTime = Date.now() - startTime;
          
          return new Response(JSON.stringify({ 
            reply: cachedResult.answer,
            cached: true,
            source: 'semantic-cache',
            similarity: cachedResult.similarity,
            responseTime: `${responseTime}ms`
          }), {
            status: 200, 
            headers: { 
              'Content-Type': 'application/json',
              'X-Cache-Status': 'HIT'
            },
          });
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Cache failed:', cacheError.message);
      }
    } else {
      console.warn('‚ö†Ô∏è Supabase not configured');
    }

    // === ÿßÿ≥ÿ™ÿØÿπÿßÿ° Gemini ===
    console.log('ü§ñ Calling Gemini...');

    const systemInstructionText = `ÿ£ŸÜÿ™ "ÿ£ÿ´ÿ± AI"ÿå ŸÖÿ≥ÿßÿπÿØ ÿØÿ±ÿßÿ≥Ÿä ŸàÿØŸàÿØ ŸàŸÖÿ≠ÿ® ŸÑŸÑŸÖÿπÿ±ŸÅÿ© ŸÖŸÜ ŸÖŸÜÿµÿ© "ÿ£ÿ´ÿ±".

### ÿ¥ÿÆÿµŸäÿ™ŸÉ:
- ŸàÿØŸàÿØ ŸàŸÖÿ∑ŸÖÿ¶ŸÜ
- ÿ™ŸÅÿßÿπŸÑŸä ŸàŸÖÿ≠ŸÅÿ≤

### ŸÇŸàÿßÿπÿØŸÉ:
1. **ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤:** ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖÿ±ÿ¨ÿπŸä ŸÅŸÇÿ∑
2. **ÿßŸÑÿ•Ÿäÿ¨ÿßÿ≤:** ÿßÿ®ÿØÿ£ ÿ®ÿ•ÿ¨ÿßÿ®ÿ© ŸÖŸàÿ¨ÿ≤ÿ© ŸàŸÖÿ®ÿßÿ¥ÿ±ÿ©
3. **Markdown:** ÿßÿ≥ÿ™ÿÆÿØŸÖ **ÿßŸÑÿπÿ±Ÿäÿ∂** Ÿà- ŸÑŸÑŸÇŸàÿßÿ¶ŸÖ
4. **ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©:** ÿßÿ∑ÿ±ÿ≠ ÿ≥ÿ§ÿßŸÑ ÿ®ÿ≥Ÿäÿ∑ ÿ®ÿπÿØ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©

### ŸÖŸÖŸÜŸàÿπ:
- ÿßÿÆÿ™ŸÑÿßŸÇ ŸÖÿπŸÑŸàŸÖÿßÿ™
- ÿ≠ŸÑ Ÿàÿßÿ¨ÿ®ÿßÿ™ ŸÖÿ®ÿßÿ¥ÿ±ÿ©

---
**ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ:**
${lectureContext || 'ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ'}
---`;

    const contents = conversationHistory.map((turn, index) => ({
      role: (index === conversationHistory.length - 1 && turn.role === 'user') ? 'user' : 'model',
      parts: [{ text: turn.content }]
    }));

    const aiAnswer = await queryGoogleAI(systemInstructionText, contents, GOOGLE_API_KEY);

    // === ÿ≠ŸÅÿ∏ ŸÅŸä Cache ===
    if (SUPABASE_URL && SUPABASE_ANON_KEY) {
      try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        const questionEmbedding = await createEmbedding(userQuestion, GOOGLE_API_KEY);
        const contextHash = lectureContext ? 
          btoa(lectureContext.substring(0, 100)) : 'default';
        
        await cacheResponse(
          supabase, 
          userQuestion, 
          questionEmbedding,
          aiAnswer.trim(), 
          contextHash
        );
      } catch (saveError) {
        console.warn('‚ö†Ô∏è Save failed:', saveError.message);
      }
    }

    const responseTime = Date.now() - startTime;

    return new Response(JSON.stringify({ 
      reply: aiAnswer.trim(),
      cached: false,
      source: 'google-ai',
      responseTime: `${responseTime}ms`
    }), {
      status: 200, 
      headers: { 
        'Content-Type': 'application/json',
        'X-Cache-Status': 'MISS'
      },
    });

  } catch (error) {
    console.error("‚ùå ERROR:", error);
    const errorTime = Date.now() - startTime;
    
    return new Response(JSON.stringify({ 
      error: 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ',
      details: error.message,
      responseTime: `${errorTime}ms`
    }), {
      status: 500, 
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
